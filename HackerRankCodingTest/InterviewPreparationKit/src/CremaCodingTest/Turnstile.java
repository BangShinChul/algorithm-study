package CremaCodingTest;

import java.util.ArrayList;
import java.util.List;

/*

대학에는 정확히 하나의 회전식 문이 있습니다.
출구 또는 출입구로 사용할 수 있습니다.
불행히도 때로는 많은 사람들이 십자형 회전식 문을 통과하기를 원하며 방향이 다를 수 있습니다.
i번째 사람은 time[i]에 개찰구에오고
direction[i]가 1이면 대학을 나가거나 direction[i]=0 인 경우 대학에 들어 가려고합니다.
사람들은 2개의 대기열을 형성하고 하나는 나가고 다른 하나는 들어간다.
그들은 개찰구에 왔을 때, 그리고 시간이 같으면 지표에 따라 명령을받습니다.

어떤 사람이 대학에 들어가기를 원하고 다른 사람이 동시에 대학을 떠나기를 원한다면 세 가지 경우가 있습니다 :

이전에 회전식 문이 사용되지 않았으면 (이전에 사용되었지만 이전에 사용되지 않았을 수도 있음),
나가기를 원하는 사람이 먼저갑니다.

이전에 개찰구가 출구로 사용 되었다면 떠날 사람이 먼저갑니다.

이전에 개찰구가 입구로 사용 된 경우 입장하려는 사람이 먼저갑니다.

십자형 회전식 문을 통과하는 데에는 1초가 걸립니다.
각 사람마다 십자형 회전식 문을 통과 할 시간을 찾으십시오.

- 함수 설명
아래 편집기에서 getTimes 함수를 완성하십시오.
이 함수는 n개의 정수 배열을 반환해야합니다.
여기서 인덱스 i의 값은 i번째 사람이 개찰기를 통과 할 시간입니다.

getTimes에는 다음과 같은 매개 변수가 있습니다.

time : 인덱스 n의 값은 i 번째 사람이 턴 스타일에 올 시간 (초)입니다.
direction : 인덱스 i의 값이 i 번째 사람의 방향 인 n 개의 정수 배열.

- 제약 조건

1 <= n <= 100000
0 <= time[i] <= 1000000000 for 0<=i<=n-1
time[i] <= time[i+1] for 0<=i<=n-2
0<= direction[i] <= 1 for 0<=i<=n-1

- 맞춤 테스트 용 입력 형식

잠긴 stub 코드는 stdin에서 입력을 읽고 함수에 전달합니다.

첫 번째 줄에는 사람 수, 시간 값 수 및 방향 값 수를 나타내는 정수 n이 포함됩니다.
다음 n 개의 라인 각각은 정수 time[i]를 포함한다.
다음 행에 n이 포함됩니다.
다음 n 개의 줄 각각은 정수 방향 [i]을 포함합니다.


- 샘플 입력 0
4
0
0
1
5
4
0
1
1
0

- 샘플 출력 0
2
0
1
5

- 샘플 해설 0
n = 4
time = [0, 0, 1, 5]
direction = [0, 1, 1, 0]

0시에 0 번과 1 번 사람은 십자형 회전식 문을 통과하기를 원합니다.
사람 0은 대학에 들어가고 사람 1은 대학을 나가기를 원합니다.
회전식 문은 이전 초에 사용되지 않았으므로 우선 순위는 사람 옆에 있습니다 1.

시간 1에 사람 0과 2가 회전식 문을 통과하기를 원합니다.
2 번 사람이 대학을 떠나고 싶어합니다.
이전 초에는 개찰구가 출구로 사용되었으므로 사람 2는 개찰구를 통과했습니다.

시간 2에 사람 0이 십자형 회전식 문을 통과합니다.
시간 5에 사람 3이 십자형 회전식 문을 통과합니다.

- 샘플 입력 1
5
0
1
1
3
3
5
0
1
0
0
1

- 샘플 출력 1
0
2
1
4
3

- 샘플 해설 1
n = 5
time = [0, 1, 1, 3, 3]
direction = [0, 1, 0, 0, 1]

0시에 사람 0은 십자형 회전식 문을 통과한다.

시간 1에서 사람 1 (출구)과 2 (enter)는 십자형 회전식 문을 통과하기를 원하고,
사람 2는 그의 방향이 이전 두 번째 방향과 같기 때문에 턴 스타일을 통과합니다.

시간 2에, 사람 1은 회전문 (출구)을 통과합니다.

3시에 3 인 (입장)과 4 인 (출구)이 개찰기를 통과하기를 원합니다.
사람 4는 십자형 회전식 문을 통과한다.
시간 4에 사람 3이 십자형 회전식 문을 통과합니다.

--
설명

입력
5 -> 사람의 시간 개수
0
1
1
3
3
5 -> 0: 들어가는거 / 1: 나가는거
0
1
0
0
1


0 1 1 3 3
0 1 0 0 1

0초에 첫번째 사람이 0으로 들어가고
회전문은 들어가는 방향으로 돌고있다.

0
0 1 1 3 3
0 1 0 0 1

여기서 1초에 움직이려는 사람 두명(2번째, 3번째)이 각각 나가고 들어가려고 하고 있다.
2번째 사람은 나가려고 하고있고
3번째 사람은 들어가려 하고있다.
현재 회전문은 들어가는 방향으로 돌고있으므로
3번째 사람이 먼저 들어오게 된다.

0   1
0 1 1 3 3
0 1 0 0 1

이제 2초에는 움직이는 사람이 없으므로 2번째 사람이 나가게 된다.
회전문은 들어가는 방향에서 나가는 방향으로 전환되었다.

0 2 1
0 1 1 3 3
0 1 0 0 1

3초에도 움직이려는 사람 두명(4번째, 5번째)이 각각 나가고 들어가려고 하고 있다.
4번째 사람은 들어가려 하고있고
5번째 사람은 나가려고 하고있다.
현재 회전문은 나가는 방향으로 돌고있으므로
5번째 사람이 먼저 나가게 된다.

0 2 1   3
0 1 1 3 3
0 1 0 0 1

4초에는 마지막 사람인 4번째 사람이 들어오게 된다.
회전문은 나가는 방향에서 들어오는 방향으로 전환된다.

0 2 1 4 3 <- 결과
0 1 1 3 3
0 1 0 0 1

이렇게 결과로는 0 2 1 4 3 이 리턴된다.

Ben의 조언: 점화식을 사용하라

* */
public class Turnstile {

    /*
        아래의 'getTimes'함수를 완료하십시오.
        이 함수는 INTEGER_ARRAY를 반환 할 것으로 예상됩니다.
        이 함수는 다음 매개 변수를 허용합니다.
        1. INTEGER_ARRAY 시간
        2. INTEGER_ARRAY 방향
     */

    public static List<Integer> getTimes(List<Integer> time, List<Integer> direction) {
        // Write your code here
        return null;
    }

    public void getResult() {
        List<Integer> time = new ArrayList<Integer>();
        List<Integer> direction = new ArrayList<Integer>();
        System.out.println(getTimes(time, direction));
    }
}
